@model ABC_Retail.ViewModels.ProductViewModel

@{
	ViewData["Title"] = "Create Product";
}

<head>
	<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
	<style>
		body {
			background-color: #f5f5f5;
			font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
		}

		.myContainer {
			background-color: #fff;
			padding: 30px;
			border-radius: 8px;
			box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
		}

		h2 {
			font-weight: 500;
			color: #343a40;
		}

		.form-label {
			font-weight: 500;
		}

		.form-control {
			border-radius: 6px;
			box-shadow: none;
			border: 1px solid #ced4da;
			padding: 10px;
		}

			.form-control:focus {
				border-color: #80bdff;
				box-shadow: 0 0 5px rgba(128, 189, 255, 0.5);
			}

		.drop-area {
			border: 2px dashed #007bff;
			padding: 30px;
			text-align: center;
			cursor: pointer;
			border-radius: 8px;
			transition: border-color 0.3s, background-color 0.3s;
			background-color: #f8f9fa;
		}

			.drop-area:hover, .drop-area.dragging {
				border-color: #0056b3;
				background-color: #e9ecef;
			}

		.file-list {
			list-style: none;
			padding: 0;
			margin-top: 10px;
		}

			.file-list li {
				display: flex;
				justify-content: space-between;
				align-items: center;
				padding: 8px 12px;
				border: 1px solid #ddd;
				border-radius: 6px;
				margin-bottom: 5px;
				background-color: #f1f3f5;
			}

		.remove-file {
			cursor: pointer;
			color: #dc3545;
			font-weight: bold;
		}

		.btn-primary {
			background-color: #007bff;
			border-color: #007bff;
			border-radius: 50px;
			padding: 10px 20px;
		}

			.btn-primary:hover {
				background-color: #0056b3;
				border-color: #0056b3;
			}
	</style>
</head>

<h2 class="mt-4 mb-3">Create New Product</h2>

<div class="myContainer">
	<!-- Display validation summary -->
	<div asp-validation-summary="ModelOnly" class="text-danger"></div>

	<!-- Create product form -->
	<form id="createProductForm" enctype="multipart/form-data">
		<div class="row">
			<div class="col-md-6">
				<div class="form-group mb-3">
					<label for="productName" class="form-label">Product Name:</label>
					<input type="text" class="form-control" asp-for="ProductName" placeholder="Enter product name" required />
					<span asp-validation-for="ProductName" class="text-danger"></span>
				</div>
			</div>
			<div class="col-md-6">
				<div class="form-group mb-3">
					<label for="productPrice" class="form-label">Product Price:</label>
					<input type="number" step="0.01" class="form-control" asp-for="ProductPrice" placeholder="Enter product price" required />
					<span asp-validation-for="ProductPrice" class="text-danger"></span>
				</div>
			</div>
		</div>

		<div class="row">
			<div class="col-md-6">
				<div class="form-group mb-3">
					<label for="productQuantity" class="form-label">Product Quantity:</label>
					<input type="number" class="form-control" asp-for="ProductQuantity" required />
					<span asp-validation-for="ProductQuantity" class="text-danger"></span>
				</div>
			</div>
			<div class="col-md-6">
				<div class="form-group mb-3">
					<label for="productImage" class="form-label">Product Image:</label>
					<input type="file" class="form-control" asp-for="File" />
					<span asp-validation-for="File" class="text-danger"></span>
				</div>
			</div>
		</div>

		<div class="form-group mb-3">
			<label for="productDescription" class="form-label">Product Description:</label>
			<textarea class="form-control" asp-for="ProductDescription" placeholder="Enter product description"></textarea>
			<span asp-validation-for="ProductDescription" class="text-danger"></span>
		</div>

		<button type="submit" class="btn btn-primary">Create Product</button>
	</form>
</div>

@section Scripts {
	@await Html.PartialAsync("_ValidationScriptsPartial")
	<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
	<script>
		$(document).ready(function() {
			$('#createProductForm').on('submit', function(event) {
				event.preventDefault(); // Prevent the default form submission

				// Show confirmation popup
				Swal.fire({
					title: 'Confirm Creation',
					text: 'Are you sure you want to create this product?',
					icon: 'question',
					showCancelButton: true,
					confirmButtonText: 'Yes, create it!',
					cancelButtonText: 'Cancel'
				}).then((result) => {
					if (result.isConfirmed) {
						// Show loading popup
						Swal.fire({
							title: 'Creating Product',
							text: 'Please wait...',
							icon: 'info',
							allowOutsideClick: false,
							didOpen: () => {
								Swal.showLoading();
							}
						});

						// Append /CreatingProduct... to the URL
						const originalUrl = window.location.href;
						window.history.replaceState({}, '', window.location.pathname + '/CreatingProduct');

						// Submit the form via AJAX
						var formData = new FormData($('#createProductForm')[0]);
						$.ajax({
							url: '@Url.Action("Create", "Product")',
							type: 'POST',
							data: formData,
							processData: false,
							contentType: false,
							success: function(data) {
								if (data.success) {
									// Show success popup
									Swal.fire({
										title: 'Product Created',
										text: data.message,
										icon: 'success'
									}).then((result) => {
										if (result.isConfirmed) {
											window.history.replaceState({}, '', originalUrl);
											window.location.href = '@Url.Action("Index", "Product")';
										}
									});
								} else {
									Swal.fire({
										title: 'Error',
										text: data.message,
										icon: 'error'
									}).then(result => {
										if (result.isConfirmed) {
											// Revert URL back to original before reloading
											window.history.replaceState({}, '', originalUrl);
											// Replace the form with the returned HTML to show validation errors
											$('#createProductFormContainer').html(data);
										}
									});
								}
							},
							error: function() {
								// Handle errors
								Swal.fire({
									title: 'Error',
									text: 'An error occurred while creating the product.',
									icon: 'error'
								}).then(result => {
									if (result.isConfirmed) {
										// Revert URL back to original before reloading
										window.history.replaceState({}, '', originalUrl);
									}
								});
							}
						});
					}
				});
			});
		});
	</script>
}